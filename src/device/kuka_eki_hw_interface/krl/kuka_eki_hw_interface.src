&ACCESS RVO
def  kuka_eki_hw_interface()
    ; Declarations
    decl e6pos pos_tgt_cartesius
    decl axis pos_tgt_axis
    decl int elements_read
    decl bool rv
    decl int control_type
    decl int moving_type
    decl int coordinate_type

    ; INI
    bas(#initmov, 0)  ; Basic initializasion of axes

    ; Initialize eki_hw_interface server
    ;   Config located in C:/ROBOTER/Config/User/Common/EthernetKRL/EkiHwInterface.xml
    ;   Starts a TCP state sever on xml-specified IP address/port.
    ;
    ;   State transmission is periodic (currently determined by $timer[1]=-## line in
    ;   eki_hw_iface_send()
    ;
    ;   Joint position commands execute as they come in.
    ;   PTP motions are blended in joint-space via c_ptp approximation when possible
    ;   via the advance run.  The advance run will read and blend command points as
    ;   soon as the become available up to value set in $advance (in range [0, 5])
    ;
    ;   Utilized system resources:
    ;     Flags:
    ;       $flag[1]:        Indicates active client connection
    ;       $timer_flag[1]:  Used to trigger periodic send of robot state
    ;     Interrupts:
    ;       15: Calls eki_hw_iface_reset() on falling edge of $flag[1]
    ;       16: Calls eki_hw_iface_send() on rising edge of $timer_flag[1]
    movement_done = false
    eki_hw_iface_init()

    ; BCO (Block COincidence) run to current position
    ; (requied for below loop continue before first incoming command)
    pos_tgt_cartesius = $pos_act_mes
    pos_tgt_axis = $axis_act_meas
    continue
    ptp pos_tgt_cartesius
    continue

    ; Loop forever
    ;$advance = 5
    $ORI_TYPE = #CONSTANT
    continue
    loop
        ; Get new command from buffer if present
        elements_read = eki_hw_iface_get(control_type, moving_type, coordinate_type, pos_tgt_cartesius, pos_tgt_axis)
        if elements_read == 1 then
            if control_type == 1 then
                if moving_type == 0 then
                    lin pos_tgt_cartesius C_PTP
                    movement_done = TRUE
                endif
                if moving_type == 1 then
                    if coordinate_type == 0 then
                        ptp pos_tgt_cartesius C_PTP
                        movement_done = TRUE
                    endif
                    if coordinate_type == 1 then
                        ptp pos_tgt_axis C_PTP
                        movement_done = TRUE
                    endif
                endif
                if moving_type == 2 then
                    lin_rel pos_tgt_cartesius #tool
                    movement_done = TRUE
                endif
                if moving_type == 3 then
                    ptp_rel pos_tgt_cartesius #tool
                    movement_done = TRUE
                endif
            endif
        endif
    endloop

    ; Note: EKI channels delete on reset or deselect of this program
    ;       See <ENVIRONMENT>Program</ENVIRONMENT> EKI config element
end

def eki_hw_iface_init()
    decl eki_status eki_ret

    ; Setup interrupts
    ; Interrupt 15 - Connection cleanup on client disconnect
    global interrupt decl 15 when $flag[1]==false do eki_hw_iface_reset()
    interrupt on 15
    ; Interrupt 16 - Timer interrupt for periodic state transmission
    global interrupt decl 16 when $timer_flag[1]==true do eki_hw_iface_send()
    interrupt on 16
    wait sec 0.012          ; Wait for next interpolation cycle
    $timer[1] = -200        ; Time in [ms] before first interrupt call
    $timer_stop[1] = false  ; Connect timer 1

    ; Create and open EKI interface
    eki_ret = eki_init("EkiHwInterface")
    eki_ret = eki_open("EkiHwInterface")
end



def eki_hw_iface_send()
    decl eki_status eki_ret
    decl real vel_percent

    if $flag[1] then  ; If connection alive
        ; Load state values into xml structure
        ; status
        eki_ret = eki_setbool("EkiHwInterface", "RobotState/@ProMove", $pro_move)
        eki_ret = eki_setint("EkiHwInterface", "RobotState/@ActAdvance", $act_advance)
        eki_ret = eki_setint("EkiHwInterface", "RobotState/@AdvanceVal", $advance)
        if movement_done then
            eki_ret = eki_setbool("EkiHwInterface", "RobotState/@MovingStatus", movement_done)
            movement_done = false
        else
            eki_ret = eki_setbool("EkiHwInterface", "RobotState/@MovingStatus", movement_done)
        endif

        ; position
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@X", $pos_act_mes.x)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@Y", $pos_act_mes.y)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@Z", $pos_act_mes.z)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A", $pos_act_mes.a)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@B", $pos_act_mes.b)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@C", $pos_act_mes.c)
        ; joint
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A1", $axis_act_meas.a1)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A2", $axis_act_meas.a2)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A3", $axis_act_meas.a3)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A4", $axis_act_meas.a4)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A5", $axis_act_meas.a5)
        eki_ret = eki_setreal("EkiHwInterface", "RobotState/Pos/@A6", $axis_act_meas.a6)
        ; velocity
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Vel/@A1", $vel_axis_act[1] * $vel_axis_ma[1] / 100.0)
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Vel/@A2", $vel_axis_act[2] * $vel_axis_ma[2] / 100.0)
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Vel/@A3", $vel_axis_act[3] * $vel_axis_ma[3] / 100.0)
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Vel/@A4", $vel_axis_act[4] * $vel_axis_ma[4] / 100.0)
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Vel/@A5", $vel_axis_act[5] * $vel_axis_ma[5] / 100.0)
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Vel/@A6", $vel_axis_act[6] * $vel_axis_ma[6] / 100.0)
        ; effort
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Eff/@A1", $torque_axis_act[1])
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Eff/@A2", $torque_axis_act[2])
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Eff/@A3", $torque_axis_act[3])
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Eff/@A4", $torque_axis_act[4])
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Eff/@A5", $torque_axis_act[5])
        ;eki_ret = eki_setreal("EkiHwInterface", "RobotState/Eff/@A6", $torque_axis_act[6])
        ; interface state
        eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/Pos/@X")
        eki_ret = eki_setint("EkiHwInterface", "RobotState/RobotCommand/@Size", eki_ret.buff)

        ; Send xml structure
        if $flag[1] then  ; Make sure connection hasn't died while updating xml structure
         eki_ret = eki_send("EkiHwInterface", "RobotState")
        endif
    endif

    ; Set timer for next interrupt [ms]
    $timer[1] = -10  ; ~10 ms for above send + 10 ms interrupt timer -> ~50 Hz state transmission
end



deffct int eki_hw_iface_available()
   decl eki_status eki_ret

   if not $flag[1] then
      return 0
   endif

   eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/@ControlType")
   return eki_ret.buff
endfct



; eki_hw_iface_get
; Tries to read most recent elemnt from buffer. q left unchanged if empty.
; Returns number of elements Read.
deffct int eki_hw_iface_get(control_type_get:out, moving_type_get:out, coordinate_type_get:out, pos_cmd_cartesius:out, pos_cmd_axis:out)
    decl eki_status eki_ret
    decl int control_type_get
    decl int moving_type_get
    decl int coordinate_type_get
    decl e6pos pos_cmd_cartesius
    decl axis pos_cmd_axis
    decl real vel_cp
    decl int tool_num
    decl int force_control
    decl int main_axis
    
    control_type_get = -1
    moving_type_get = -1
    coordinate_type_get = -1
    tool_num = -1
    force_control = -1
    main_axis = -1

    if not $flag[1] then
        return 0
    endif

    eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/@ControlType")
    if eki_ret.buff <= 0 then
        return 0
    endif

    eki_ret = eki_getint("EkiHwInterface", "RobotCommand/@ControlType", control_type_get)

    if control_type_get == 1 then
        eki_ret = eki_getint("EkiHwInterface", "RobotCommand/@MovingType", moving_type_get)
        eki_ret = eki_getint("EkiHwInterface", "RobotCommand/@CoordinateType", coordinate_type_get)
        if coordinate_type_get == 0 then
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@X", pos_cmd_cartesius.x)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@Y", pos_cmd_cartesius.y)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@Z", pos_cmd_cartesius.z)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A", pos_cmd_cartesius.a)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@B", pos_cmd_cartesius.b)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@C", pos_cmd_cartesius.c)
        endif
        if coordinate_type_get == 1 then
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A1", pos_cmd_axis.a1)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A2", pos_cmd_axis.a2)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A3", pos_cmd_axis.a3)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A4", pos_cmd_axis.a4)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A5", pos_cmd_axis.a5)
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/Pos/@A6", pos_cmd_axis.a6)
        endif
    endif
    if control_type_get == 0 then
        ; set advance
        eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/@Advance")
        if eki_ret.buff > 0 then
            eki_ret = eki_getint("EkiHwInterface", "RobotCommand/@Advance", $advance)
        endif

        ; set ov_pro
        eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/@OvPro")
        if eki_ret.buff > 0 then
            eki_ret = eki_getint("EkiHwInterface", "RobotCommand/@OvPro", $ov_pro)
        endif

        ; set vel
        eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/@VelCP")
        if eki_ret.buff > 0 then
            eki_ret = eki_getreal("EkiHwInterface", "RobotCommand/@VelCP", $vel.cp)
        endif

        ; set vel
        eki_ret = eki_checkbuffer("EkiHwInterface", "RobotCommand/@ToolNum")
        if eki_ret.buff > 0 then
            eki_ret = eki_getint("EkiHwInterface", "RobotCommand/@ToolNum", tool_num)
            $tool = tool_data[tool_num]
            $act_tool = tool_num
        endif
    endif
    eki_ret = eki_clearbuffer("EkiHwInterface", "RobotCommand")
    return 1
endfct



def eki_hw_iface_reset()
   decl eki_status eki_ret

   eki_ret = eki_clear("EkiHwInterface")
   eki_ret = eki_init("EkiHwInterface")
   eki_ret = eki_open("EkiHwInterface")
end
